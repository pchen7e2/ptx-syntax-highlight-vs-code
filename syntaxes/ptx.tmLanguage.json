{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PTX",
  "scopeName": "source.ptx",
  "fileTypes": ["ptx"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#directives"
    },
    {
      "include": "#labels"
    },
    {
      "include": "#instructions"
    },
    {
      "include": "#registers"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ptx",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ptx",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "name": "keyword.control.directive.ptx",
          "match": "\\.(version|target|address_size|visible|extern|weak|common|aligned|file|loc|section|entry|maxntid|reqntid|minnctapersm|maxnctapersm|pragma|branchtargets|calltargets|callprototype)"
        },
        {
          "name": "markup.italic.ptx",
          "match": "\\.(global|shared|const|local|param|reg|tex|surf)(?:::[a-zA-Z_][a-zA-Z0-9_]*)?"
        },
        {
          "name": "entity.name.function.directive.ptx",
          "match": "\\.func\\b"
        },
        {
          "name": "storage.type.ptx",
          "match": "\\.(u8|u16|u32|u64|s8|s16|s32|s64|f16|f32|f64|b8|b16|b32|b64|pred|texref|samplerref|surfref)"
        }
      ]
    },
    "labels": {
      "patterns": [
        {
          "name": "entity.name.section.ptx",
          "match": "^\\s*[$a-zA-Z_][a-zA-Z0-9_]*:"
        }
      ]
    },
    "instructions": {
      "patterns": [
        {
          "name": "keyword.instruction.tc.ptx",
          "match": "\\b(tex|tld4|txq|suld|sust|sured|wmma|wgmma|tcgen05\\.alloc|tcgen05\\.dealloc|tcgen05\\.relinquish_alloc_permit|tcgen05\\.commit|tcgen05\\.cp|tcgen05\\.fence|tcgen05\\.ld|tcgen05\\.mma|tcgen05\\.mma\\.ws|tcgen05\\.mma\\.cta_group|tcgen05\\.shift|tcgen05\\.st|tcgen05\\.wait)\\b"
        },
        {
          "name": "keyword.instruction.arithmetic.ptx",
          "match": "\\b(add|sub|mul|mad|div|rem|abs|neg|min|max|copysign|sqrt|rsqrt|sin|cos|lg2|ex2|rcp|rcp\\.approx\\.ftz)\\b"
        },
        {
          "name": "keyword.instruction.comparison.ptx",
          "match": "\\b(set|setp|selp|slct)\\b"
        },
        {
          "name": "keyword.instruction.logic.ptx",
          "match": "\\b(and|or|xor|not|cnot|shf|shl|shr)\\b"
        },
        {
          "name": "keyword.instruction.movement.ptx",
          "match": "\\b(mov|shfl|prmt|cp|ld|st|ldmatrix|stmatrix|ldu|atom|red|vote|activemask|bar|barrier|mbarrier|membar|fence)\\b"
        },
        {
          "name": "keyword.instruction.control.ptx",
          "match": "\\b(bra|call|ret|exit|trap|brkpt|@)\\b"
        },
        {
          "name": "keyword.instruction.conversion.ptx",
          "match": "\\b(cvt|cvta|isspacep)\\b"
        },
        {
          "name": "keyword.instruction.texture.ptx",
          "match": "\\b(tex|tld4|txq|suld|sust|sured)\\b"
        },
        {
          "name": "keyword.instruction.video.ptx",
          "match": "\\b(vadd|vsub|vabsdiff|vmin|vmax|vshl|vshr|vmad|vset)\\b"
        },
        {
          "name": "keyword.instruction.misc.ptx",
          "match": "\\b(clz|bfind|bfe|bfi|brev|popc|fns|pmevent)\\b"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "variable.other.register.ptx",
          "match": "%[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "variable.other.register.special.ptx",
          "match": "%[a-zA-Z]+\\.[a-zA-Z]+"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ptx",
          "match": "0[xX][0-9a-fA-F]+"
        },
        {
          "name": "constant.numeric.binary.ptx",
          "match": "0[bB][01]+"
        },
        {
          "name": "constant.numeric.octal.ptx",
          "match": "0[0-7]+"
        },
        {
          "name": "constant.numeric.float.ptx",
          "match": "[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fF]?"
        },
        {
          "name": "constant.numeric.decimal.ptx",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.language.ptx",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.ptx",
          "match": "(==|!=|<|<=|>|>=|lo|ls|hi|hs|equ|neu|ltu|leu|gtu|geu|num|nan)"
        },
        {
          "name": "keyword.operator.arithmetic.ptx",
          "match": "(\\+|\\-|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.logical.ptx",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.ptx",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.ptx",
          "match": "="
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ptx",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ptx",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "identifiers": {
      "name": "variable.other.identifier.ptx",
      "match": "[a-zA-Z_][a-zA-Z0-9_]*"
    }
  }
}
